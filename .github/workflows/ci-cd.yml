name: Build & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.IMAGE_TAG }}
    steps:
      # Step 1: Checkout the code
      - name: Checkout repo
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          

      # Step 3: Cache dependencies
      - name: Cache NPM deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # Step 5: Run tests
      - name: Run tests
        run: npm test || true

      # Step 6: Build the application
      - name: Build Next.js
        run: npm run build

      # Step 7: Set image tag
      - name: Set image tag
        id: tag
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

  docker_push:
    name: Build and Push Docker Image
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout repo
        uses: actions/checkout@v3

      # Step 2: Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Log in to DockerHub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
       # Step 5: Set image tag
      - name: Set image tag
        id: tag
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      # Step 6: Build and push Docker image
      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/oben-brands-landing:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/oben-brands-landing:${{ env.IMAGE_TAG }}

  deploy_to_k8s:
    name: Deploy to Kubernetes
    needs: docker_push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout repo
        uses: actions/checkout@v3

      # Step 2: Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      # Step 3: Load kubeconfig
      - name: Load kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          echo "$KUBECONFIG_DATA" | base64 --decode > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      # Step 4: Update Deployment image
      - name: Update Deployment image
        run: |
          kubectl set image deployment/nextjs-app nextjs=${{ secrets.DOCKERHUB_USERNAME }}/oben-brands-landing:${{ needs.build_test.outputs.image_tag }}
          kubectl rollout status deployment/nextjs-app

  deploy_to_render:
    name: Deploy to Render
    needs: docker_push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Deploy to Render
      - name: Deploy to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
